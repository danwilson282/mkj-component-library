// scripts/generateStory.ts
import { parse } from "react-docgen-typescript";
import fs from "fs";
import path from "path";

const componentName = "Button"
// Set paths
const componentPath = path.resolve(`./src/components/${componentName}/${componentName}.tsx`);
const outputPath = path.resolve(`./src/components/${componentName}/${componentName}.stories.tsx`);

const [component] = parse(componentPath);
const props = component.props || {};

// Helper: Extract union string values (like 'solid' | 'ghost')
const extractUnionValues = (raw?: string): string[] => {
  if (!raw) return [];
  // Match both quoted strings and raw identifiers
  const matches = raw.match(/"([^"]+)"|'([^']+)'|([a-zA-Z0-9_]+)/g);
  if (!matches) return [];
  return matches.map((val) => val.replace(/^['"]|['"]$/g, ""));
};

// Determine argTypes + generate base story args
const argTypes: Record<string, any> = {};
const baseArgs: Record<string, any> = {};

const isFunctionType = (typeName: string) =>
  /^\(\)\s*=>/.test(typeName) || /=>\s*\w+/.test(typeName);



Object.entries(props).forEach(([propName, prop]) => {
  const typeName = prop.type?.name || '';

  if (isFunctionType(typeName)) {
    // Skip function props (like onClick)
    return;
  }

  const options = extractUnionValues(typeName);

  if (options.length >= 2) {
    // Union of string literals
    argTypes[propName] = {
      control: { type: 'radio' },
      options,
    };
    baseArgs[propName] = options[0]; // Use first value as default
  } else if (typeName === 'boolean') {
    argTypes[propName] = { control: 'boolean' };
    baseArgs[propName] = false;
  } else if (typeName === 'string') {
    argTypes[propName] = { control: 'text' };
    baseArgs[propName] = propName === 'label' ? 'Click me' : '';
  } else {
    console.warn(`⚠️ Skipping unhandled or complex prop: ${propName}: ${typeName}`);
  }
});


// Generate story file content
const storyContent = `
// ⚠️ Auto-generated by generateStory.ts
import { ${componentName} } from './${componentName}';
import type { Meta, StoryObj } from '@storybook/react';

const meta: Meta<typeof ${componentName}> = {
  title: 'Components/${componentName}',
  component: ${componentName},
  tags: ["autodocs"],
  argTypes: ${JSON.stringify(argTypes, null, 2)},
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: ${JSON.stringify(baseArgs, null, 2)},
};
`;

fs.writeFileSync(outputPath, storyContent);
console.log(`✅ ${componentName}.stories.tsx generated!`);
