
// ⚠️ Auto-generated by generateStory.ts
import { Button } from './Button';
import type { Meta, StoryObj } from '@storybook/react';
import { within, userEvent } from "@storybook/testing-library";
import {expect, jest} from '@storybook/jest'

const meta: Meta<typeof Button> = {
  title: 'Components/Button',
  component: Button,
  tags: ["autodocs"],
  argTypes: {
  "label": {
    "control": "text"
  },
  "colour": {
    "control": {
      "type": "radio"
    },
    "options": [
      "primary",
      "success",
      "warning",
      "danger"
    ]
  },
  "variant": {
    "control": {
      "type": "radio"
    },
    "options": [
      "solid",
      "bordered",
      "faded",
      "light",
      "ghost",
      "shadow"
    ]
  },
  "isLoading": {
    "control": "boolean"
  },
  "size": {
    "control": {
      "type": "radio"
    },
    "options": [
      "sm",
      "md",
      "lg"
    ]
  }
},
};

export default meta;
type Story = StoryObj<typeof meta>;
let clickCount = 0;
const mockOnClick = () => {
  clickCount++;
};
export const Default: Story = {
  args: {
  "label": "Click me",
  "colour": "primary",
  "variant": "solid",
  "isLoading": false,
  "size": "sm",
  onClick: mockOnClick
},
  play: async ({ canvasElement, args }) => {
    clickCount = 0;
    const canvas = within(canvasElement); // ✅ wrap with 'within'
    const button = await canvas.getByRole('button', { name: /click me/i });
    await userEvent.click(button);
    expect(clickCount).toBe(1);
  },
};
