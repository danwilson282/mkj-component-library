
// ⚠️ Auto-generated by generateStory.ts
import { LoginButton } from './LoginButton';
import type { Meta, StoryObj } from '@storybook/react';
import { within, userEvent, waitFor, screen } from "@storybook/testing-library";
import {expect, jest} from '@storybook/jest'
import { useState } from 'react';
const meta: Meta<typeof LoginButton> = {
  title: 'Components/LoginButton',
  component: LoginButton,
  tags: ["autodocs"],
  argTypes: {},
};

export default meta;
type Story = StoryObj<typeof meta>;
let clickVal = "";
const mockOnClick = async (val: string) => {
  clickVal=val
};
export const Default: Story = {
  args: {
    // user: {
    //   name: "Joe Bloggs",
    //   email: "any@oldjoe.com",
    //   image: "https://i.pravatar.cc/150?u=a04258114e29026702d"
    // },
    signOut: {
      label: "Sign out",
      handleSignOut: () => mockOnClick("signOut")
    },
    registerPage: {
      url: "/",
      label: "Register link"
    }
  },

};

export const SignedIn: Story = {
  args: {
    ...Default.args, // ✅ merge the default props
  user: {
    name: "Joe Bloggs",
    email: "any@oldjoe.com",
    image: "https://i.pravatar.cc/150?u=a04258114e29026702d"
  },
  },
  play: async ({ canvasElement, args }) => {
    clickVal = "";
    const canvas = within(canvasElement); // ✅ wrap with 'within'
    const button = await canvas.getByRole('button', { name: /Sign out/i });
    await userEvent.click(button);
    expect(clickVal).toBe("signOut");
  },
};

export const WithGoogle: Story = {
  args: {
    ...Default.args, // ✅ merge the default props
    useGoogle: {
      title: "Sign in with Google",
      label: "Continue with Google",
      handleGoogleSubmit: async (e: any) => {
        e.preventDefault(); // ✅ Prevent form submission
        return mockOnClick("google");
      }
    }
  },
  play: async ({ canvasElement, args }) => {
    clickVal = "";
    const canvas = within(canvasElement); // ✅ wrap with 'within'
    const loginButton = await canvas.getByRole('button', { name: /Login/i });
    await userEvent.click(loginButton);
    await waitFor(() => {
      expect(screen.getByRole('dialog')).toBeInTheDocument();
    });
    const providerButton = await screen.findByRole('button', { name: /Continue with Google/i });
    expect(providerButton).toBeInTheDocument();
    await userEvent.click(providerButton);
    expect(clickVal).toBe("google");
},
};

export const WithEmail: Story = {
  decorators: [
    (Story) => {
      const [email, setEmail] = useState("");
      
      return (
        <Story
          args={{
            ...Default.args,
            useEmail: {
              title: "Magic Link",
              label: "Send Magic Link",
              email: email,
              setEmail: setEmail,
              handleEmailSubmit: async (e: any) => {
                e.preventDefault();
                await mockOnClick("email"); // ✅ Just call it directly
              }
            },
          }}
        />
      );
    },
  ],
  args: {
    ...Default.args,
    useEmail: {
      title: "Magic Link",
      label: "Send Magic Link",
      email: "",
      setEmail: (val) => {
        const newVal = typeof val === "function" ? val("") : val;
        console.log("Set email to:", newVal);
      },
      handleEmailSubmit: () => mockOnClick("email")
    },
  },
    play: async ({ canvasElement, args }) => {
      clickVal = "";
      const canvas = within(canvasElement); // ✅ wrap with 'within'
      const loginButton = await canvas.getByRole('button', { name: /Login/i });
      await userEvent.click(loginButton);
      await waitFor(() => {
        expect(screen.getByRole('dialog')).toBeInTheDocument();
      });
      const providerButton = await screen.findByRole('button', { name: /Send magic link/i });
      expect(providerButton).toBeInTheDocument();
      await userEvent.click(providerButton);
      await waitFor(() => {
        expect(screen.getByText("Please enter a valid email")).toBeInTheDocument();
      });
      const emailInput = await screen.findByLabelText(/Email/i);
      await userEvent.type(emailInput, 'test@example.com');

      await userEvent.click(providerButton);
      
      // ✅ Check the success message appears
      await waitFor(() => {
        expect(screen.getByText(/Check your email for a magic link/i)).toBeInTheDocument();
      });
    
      expect(clickVal).toBe("email");
      // expect(clickVal).toBe("email");
},
};

export const WithCredentials: Story = {
    decorators: [
    (Story) => {
      const [email, setEmail] = useState("");
      const [password, setPassword] = useState("")
      return (
        <Story
          args={{
            ...Default.args,
            useCredentials: {
              title: "Sign in with Email",
              label: "Login",
              email: email,
              setEmail: setEmail,
              password: password,
              setPassword: setPassword,
              handleCredentialsSubmit: async (e: any) => {
                e.preventDefault();
                await mockOnClick("credentials"); // ✅ Just call it directly
              }
            },
          }}
        />
      );
    },
  ],
  args: {
    ...Default.args,
    useCredentials: {
      title: "Sign in with Email",
      label: "Login",
      email: "",
      password: "",
      setEmail: (val) => {
        const newVal = typeof val === "function" ? val("") : val;
        console.log("Set email to:", newVal);
      },
      setPassword: (val) => {
        const newVal = typeof val === "function" ? val("") : val;
        console.log("Set password to:", newVal);
      },
      handleCredentialsSubmit: () => mockOnClick("credentials")
    },
  },
      play: async ({ canvasElement, args }) => {
      clickVal = "";
      const canvas = within(canvasElement); // ✅ wrap with 'within'
      const loginButton = await canvas.getByRole('button', { name: /Login/i });
      await userEvent.click(loginButton);
      await waitFor(() => {
        expect(screen.getByRole('dialog')).toBeInTheDocument();
      });
      const providerButton = await screen.findByRole('button', { name: /Login/i });
      expect(providerButton).toBeInTheDocument();
      const emailInput = await screen.findByLabelText(/Email/i);
      const passwordInput = await screen.findByLabelText(/Password/i);
      await userEvent.type(emailInput, 'test@example.com');
      await userEvent.type(passwordInput, 'password');
      await userEvent.click(providerButton);
    
      expect(clickVal).toBe("credentials");
},
};
